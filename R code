
######
### This is the R code for my master thesis 
### Main functions are CTC and bootstrap_CTC. 
### Read READme.txt file for further information

#You may try an example of its usage
#Example:
#library(EnvStats) #or some other package to generate pareto noise

#n=1000

#epsilon_a=rpareto(n, 1,1);
#epsilon_b=rpareto(n, 1,1)

#b=rep(0, n);a=rep(0, n);

#for (i in 10:n) {
#  a[i]=0.5*a[i-1] +epsilon_a[i];
#  b[i]=0.5*b[i-1]  +0.5*a[i-5]+epsilon_b[i];
#}
#x=data.frame(a,b);


#plot(x[,1], type="l", col="blue", xlab="", ylab=""); #DRAW PLOT OF OUR GENERATED TIME SERIES
#par(new=TRUE);
#plot(x[,2], type="l",col="red", xlab="", ylab="", yaxt = "n");axis(4);
#legend("topright", c("Cause", "Efect"), col = c("blue","red"), lty = 1)



#CTC(x, lag=5) 

#CTC_bootstrap(x, lag=5) #it can take up to a minute




#########################CTC= causal tail coefficient for time series###############################################################
CTC<- function(x, lag=3, v=0.5, both_ways=FALSE, derivative=FALSE){
  n=nrow(x)
  k=floor(n^{v})
  
  
##### Preliminary functions#######
  
  differentiate <- function(a){ #change X to X*
    b=NULL
    for (j in 1:ncol(a)) b=cbind(b,diff(a[,j]))
    return(b)
  }
  
  run_future_max <- function(x, k=3, instant=TRUE){ #instant= do we want to consider Y_0?
    if (instant==TRUE) {q=0}else{q=1}
    
    n=length(x);  y=c()  
    for (i in 1:n) {y=rbind(y, max(x[(min(n,i+q)):(min(n,i+k))]))}
    
    return(y)
  }
  
  
  transform_series<-function(x, move=TRUE){
    
    if(move){
      x[,1]=x[,1]-median(x[,1]) 
      x[,2]=x[,2]-median(x[,2]) 
    }
    
    x[,1]=abs(x[,1])
    x[,2]=abs(x[,2])
    
    return(x)
  }
  
  ####computation of CTC in one direction
  CTC_one <- function(x){
    sort_x=data.frame(cbind(sort(x[,1]), sort(x[,2])))
    i=which(x[,1]>=sort_x[n-k+1,1])
    y=run_future_max(x[,2], lag, instant = FALSE)#we only need the maximum of the next lag values in the second series
    C=sum(ecdf(x[,2])(y[i]))
    return(C/length(i))
  }
  
  
  CTC_two<- function(x){ ###just do the same in the other direction
    y=data.frame(x[,2], x[,1])
    return(CTC_one(y))}
  
  
  if (derivative==TRUE) {x=differentiate(x)}
  if (both_ways==TRUE) {x=transform_series(x, TRUE)}
  
  
  result=data.frame(rbind(CTC_one(x), CTC_two(x)))
  colnames(result)<-c("CTC")
  rownames(result)<-c("X-->Y ", "Y-->X ")
  
  
  return(result)
}



##############################BOOTSTRAP##########################################################################################################

CTC_bootstrap<-function(x, number_of_blocks=15, number_of_resampling=200, lag=3,  v=0.5){
  ###Preliminary functions####
  
  switcher_for_bootstrap <- function(x, number_of_blocks=15){ #resampling block-wise
    
    n=nrow(x)
    m=n%/%number_of_blocks #length of one block
    
    y=c()
    for (i in 1:number_of_blocks) {#choose one random block with the beginning uniformly chosen from 1:(n-m)
      kocka=sample(1:(n-m), 1)
      for (j in 1:m) {
        y=rbind(y,x[kocka+j,])  #Add this block to our resampled series
      }
      
    }
    #what to do with the ending if it is not divisible? we just add one random block with smaller length to obtain times eris with length $n$ again
    if (ncol(x)==1) {  #Code for one-dimensional time series
      if(n%%number_of_blocks!=0){y=c(y,x[((number_of_blocks*m+1):n),])}} 
    else{
      if(n%%number_of_blocks!=0){
        k=n-number_of_blocks*m
        kocka=sample(1:(n-k), 1)
        
        for (j in 1:k) {
          y=rbind(y,x[kocka+j,])  
        }}
    }
    return(data.frame(y))
  }
  
  #####Compute one bootstrap resample and its CTC
  
  bootstrap_step<-function(x, number_of_blocks=15, number_of_resampling=200, lag=3,  v=0.5){
    
    C=CTC(x, lag,  v)
    list=c(0,0)
    
    for (i in 1:number_of_resampling) {
      y=switcher_for_bootstrap(x, number_of_blocks)
      list=cbind(list, 2*C- CTC(y, lag,  v)) #this is the core step
    }
    return(list[,-1])
  }
  
  ####CTC bootstrap- finishing numbers when we know the resampled CTC values
  C=CTC(x, lag, v)
  list= bootstrap_step(x, number_of_blocks, number_of_resampling, lag,  v)
  
  
  x=list[1,]
  p_value_x=length(x[x >=1])/length(x)
  first=c(C[1,], as.numeric((quantile(x, 0.05))), as.numeric(quantile(x,0.95)), p_value_x)
  y=list[2,]
  p_value_y=length(y[y >=1])/length(y)
  second=c(C[2,], as.numeric((quantile(y, 0.05))), as.numeric(quantile(y,0.95)), p_value_y)
  
  result=data.frame(rbind(first, second))
  colnames(result)<-c("CTC", "5%", "95%", "p-value")
  rownames(result)<-c("X-->Y", "Y-->X")
  return(result)
}

